#include <iostream>

class Complexo{
	private:
		int re, im;
	public:
		Complexo (int, int);
		void setReal (int);
		void setImaginario (int);
		int getReal ();
		int getImaginario ();
		void soma(Complexo); 
		void sub(Complexo); 
		void mult(Complexo);
		void div(Complexo); 	
};

//Construtor que recebe dois inteiros a e b e cria um objeto Complexo
Complexo::Complexo(int re, int im){
	this->setReal (re);
	this->setImaginario (im);
}

void Complexo::setReal(int re){
	this->re=re;
}

void Complexo::setImaginario(int im){
	this->im=im;
}

int Complexo::getReal(){
	return this->re;
}

int Complexo::getImaginario(){
	return this->im;
}

//Recebe um objeto Complexo e o soma com o objeto invocador do método
void Complexo::soma(Complexo c){
	this->setReal(this->getReal() + c.getReal());
	this->setImaginario(this->getImaginario() + c.getImaginario());
}

//Recebe um objeto Complexo e o substrai do objeto invocador do método
void Complexo::sub(Complexo c){
	this->setReal(this->getReal() - c.getReal());
	this->setImaginario(this->getImaginario() - c.getImaginario());
}

//Recebe um objeto Complexo e o multiplica com o objeto invocador do método
void Complexo::mult(Complexo complx){
	int a, b, c, d;
	a = this->getReal();
	b = this->getImaginario();
	c = complx.getReal();
	d = complx.getImaginario();
	this->setReal(a*c - b*d);
	this->setImaginario(a*d + b*c);
}

//Recebe um objeto Complexo e divide o objeto invocador do método por ele
void Complexo::div(Complexo complx){
	int a, b, c, d;
	a = this->getReal();
	b = this->getImaginario();
	c = complx.getReal();
	d = complx.getImaginario();
	this->setReal((a*c + b*d) / (c*c + d*d));
	this->setImaginario((b*c - a*d) / (c*c + d*d));
}

int main (){
	using namespace std;
	
	int re1, im1, re2, im2;
	char op, i;
	//leitura até EOF (ctrl+D)
	while(cin >> re1 >> im1 >> i >> op >> re2 >> im2>> i){
		//cout << "[" << re1 << " " << op << " " << re2 <<
		//im2 << "]\n";
		Complexo c1 (re1, im1), c2 (re2, im2);
		switch(op){
			case '+': c1.soma(c2); 
				break;
			case '-': c1.sub (c2);
				break;
			case '*': c1.mult (c2);
				break;
			case '/': c1.div (c2);
				break;
		}
		cout << c1.getReal() << " " << c1.getImaginario() << "i\n";
	}
	
	return 0;
}